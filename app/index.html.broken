<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signals & Actions - LinkedIn Engagement Tracker</title>
    
    <!-- External Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Configuration -->
    <script src="config.js"></script>
    
    <!-- Swiss Design System -->
    <link rel="stylesheet" href="./styles/swiss-design.css">
    
    <style>
        /* Page-specific overrides only - main styles in swiss-design.css */
        /* Fallback styles in case external CSS fails */
        .sidebar-nav {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: #f8fafc;
            border-right: 1px solid #e2e8f0;
            display: flex;
            flex-direction: column;
            z-index: 40;
        }
        
        .main-content {
            margin-left: 280px;
            padding: 2rem;
            min-height: 100vh;
        }
        
        .view {
            display: none;
        }
        
        .view:not(.hidden) {
            display: block;
        }
        
        .metric-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            padding: 1.5rem;
        }
        
        .data-table {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        
        .data-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .data-table th {
            background: #f8fafc;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            font-size: 0.875rem;
            color: #475569;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .data-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
        }
        
        .btn-primary:hover {
            background: #2563eb;
        }
        
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body class="has-sidebar page-with-sidebar">
    <div id="app" class="min-h-screen">
        <!-- Sidebar Navigation -->
        <div id="sidebar-container"></div>
        
        <!-- Mobile Sidebar Toggle -->
        <button class="sidebar-toggle" onclick="toggleSidebar()">
            <i class="fas fa-bars"></i>
        </button>
        
        <!-- Main Content -->
        <main class="main-content">
            <!-- Dashboard View -->
            <div id="dashboard-view" class="view fade-in">
                <!-- Organic Metrics -->
                <div class="mb-6">
                    <h3 class="text-sm font-medium text-gray-600 mb-3">Organic Engagement</h3>
                    <div class="grid grid-cols-2 md:grid-cols-5 gap-6">
                        <div class="metric-card text-center">
                            <div class="text-2xl font-semibold text-slate-900 text-mono" id="stat-people">0</div>
                            <div class="text-xs text-muted mt-1">Total People</div>
                        </div>
                        <div class="metric-card text-center">
                            <div class="text-2xl font-semibold text-slate-900 text-mono" id="stat-posts">0</div>
                            <div class="text-xs text-muted mt-1">Posts</div>
                        </div>
                        <div class="metric-card text-center">
                            <div class="text-2xl font-semibold text-slate-900 text-mono" id="stat-companies">0</div>
                            <div class="text-xs text-muted mt-1">Companies</div>
                        </div>
                        <div class="metric-card text-center">
                            <div class="text-2xl font-semibold text-slate-900 text-mono" id="stat-engagements">0</div>
                            <div class="text-xs text-muted mt-1">Engagements</div>
                        </div>
                        <div class="metric-card text-center">
                            <div class="text-2xl font-semibold text-slate-900 text-mono" id="stat-hot">0</div>
                            <div class="text-xs text-muted mt-1">Hot Prospects</div>
                        </div>
                    </div>
                </div>
                
                <!-- Campaign Performance Metrics -->
                <div class="mb-8">
                    <h3 class="text-sm font-medium text-gray-600 mb-3">Campaign Performance</h3>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
                        <div class="metric-card text-center bg-blue-50 border-blue-200">
                            <div class="text-2xl font-semibold text-blue-900 text-mono" id="stat-campaigns">0</div>
                            <div class="text-xs text-blue-700 mt-1">Active Campaigns</div>
                        </div>
                        <div class="metric-card text-center bg-green-50 border-green-200">
                            <div class="text-2xl font-semibold text-green-900 text-mono" id="stat-spend">$0</div>
                            <div class="text-xs text-green-700 mt-1">Total Spend</div>
                        </div>
                        <div class="metric-card text-center bg-purple-50 border-purple-200">
                            <div class="text-2xl font-semibold text-purple-900 text-mono" id="stat-campaign-engagements">0</div>
                            <div class="text-xs text-purple-700 mt-1">Campaign Engagements</div>
                        </div>
                        <div class="metric-card text-center bg-amber-50 border-amber-200">
                            <div class="text-2xl font-semibold text-amber-900 text-mono" id="stat-cpe">$0</div>
                            <div class="text-xs text-amber-700 mt-1">Cost per Engagement</div>
                        </div>
                    </div>
                </div>
                
                <!-- Quick Actions -->
                <div class="metric-card mb-8">
                    <h3 class="text-strong text-base mb-4">Quick Import</h3>
                    <div class="space-y-3">
                        <input type="text" id="quick-run-id" placeholder="Apify Run ID (e.g., qEDjxfcGtjl6vcMZk)" 
                               class="w-full px-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm">
                        <input type="text" id="quick-post-url" placeholder="LinkedIn Post URL (optional)" 
                               class="w-full px-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm">
                        <button onclick="app.quickImport()" class="w-full btn btn-primary">
                            Import Run
                        </button>
                    </div>
                </div>
                
                <!-- Recent Activity -->
                <div class="metric-card">
                    <h3 class="text-strong text-base mb-4">Hot Prospects (5+ engagements)</h3>
                    <div id="hot-prospects-list" class="space-y-2">
                        <p class="text-sm text-muted">No data yet. Import some engagements to get started!</p>
                    </div>
                </div>
            </div>
            
            <!-- People View -->
            <div id="people-view" class="view hidden">
                <div class="metric-card mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-strong text-base">All People</h3>
                        <div class="relative">
                            <svg class="icon icon-sm absolute left-3 top-2.5 text-muted" viewBox="0 0 24 24">
                                <circle cx="11" cy="11" r="8"></circle>
                                <path d="m21 21-4.35-4.35"></path>
                            </svg>
                            <input type="text" placeholder="Search people..." onkeyup="app.filterPeople(this.value)" 
                                   class="pl-10 pr-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm w-64">
                        </div>
                    </div>
                    <!-- Source Filter Buttons -->
                    <div class="flex gap-2">
                        <button id="filter-all-sources" class="filter-tab active" onclick="app.filterBySource('all')">
                            All <span class="ml-1 text-mono" id="count-all-sources">0</span>
                        </button>
                        <button id="filter-campaign" class="filter-tab" onclick="app.filterBySource('campaign')">
                            ðŸŽ¯ Campaign <span class="ml-1 text-mono" id="count-campaign">0</span>
                        </button>
                        <button id="filter-organic" class="filter-tab" onclick="app.filterBySource('organic')">
                            ðŸ“„ Organic <span class="ml-1 text-mono" id="count-organic">0</span>
                        </button>
                    </div>
                </div>
                <div class="data-table">
                    <table class="w-full" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <th style="width: 25%;">Name</th>
                                <th style="width: 20%;">Company</th>
                                <th style="width: 20%;">Title</th>
                                <th style="width: 20%;">Campaign Source</th>
                                <th style="width: 15%;">Score</th>
                            </tr>
                        </thead>
                        <tbody id="people-list">
                            <tr>
                                <td colspan="4" class="text-center py-8 text-muted">
                                    No people yet. Import data to get started!
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Companies View -->
            <div id="companies-view" class="view hidden">
                <div class="metric-card mb-6">
                    <h3 class="text-strong text-base">Companies</h3>
                </div>
                <div class="data-table">
                    <table class="w-full" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <th style="width: 35%;">Company</th>
                                <th style="width: 20%;">People</th>
                                <th style="width: 25%;">Total Engagements</th>
                                <th style="width: 20%;">Avg Score</th>
                            </tr>
                        </thead>
                        <tbody id="companies-list">
                            <tr>
                                <td colspan="4" class="text-center py-8 text-muted">
                                    No companies yet. Import data to get started!
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Posts View -->
            <div id="posts-view" class="view hidden">
                <div class="metric-card mb-6">
                    <h3 class="text-strong text-base">Posts</h3>
                </div>
                <div class="data-table">
                    <table class="w-full" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <th style="width: 40%;">Post Title</th>
                                <th style="width: 20%;">Type</th>
                                <th style="width: 20%;">Posted Date</th>
                                <th style="width: 20%;">Engagements</th>
                            </tr>
                        </thead>
                        <tbody id="posts-list">
                            <tr>
                                <td colspan="4" class="text-center py-8 text-muted">
                                    Loading posts...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Campaigns View -->
            <div id="campaigns-view" class="view hidden">
                <div class="metric-card mb-6">
                    <h3 class="text-strong text-base">Campaigns</h3>
                </div>
                <div class="data-table">
                    <table class="w-full" style="table-layout: fixed;">
                        <thead>
                            <tr>
                                <th style="width: 30%;">Campaign Name</th>
                                <th style="width: 20%;">Type</th>
                                <th style="width: 20%;">Status</th>
                                <th style="width: 15%;">Posts</th>
                                <th style="width: 15%;">Engagements</th>
                            </tr>
                        </thead>
                        <tbody id="campaigns-list">
                            <tr>
                                <td colspan="5" class="text-center py-8 text-muted">
                                    Loading campaigns...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
        
        <!-- Import Modal (kept for import functionality) -->
        <div id="import-modal" class="hidden modal-backdrop" onclick="app.closeModalOnBackdrop(event, 'import-modal')">
            <div class="bg-white rounded-lg p-8 max-w-md w-full" onclick="event.stopPropagation()">
                <h3 class="text-lg font-semibold mb-4">Import LinkedIn Data</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Option 1: Apify Run ID</label>
                        <input type="text" id="import-run-id" placeholder="e.g., qEDjxfcGtjl6vcMZk" 
                               class="w-full px-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm mb-2">
                        <input type="text" id="import-post-url" placeholder="LinkedIn Post URL (optional)" 
                               class="w-full px-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm">
                        <button onclick="app.importFromApify()" class="mt-2 w-full btn btn-primary">
                            Import from Apify
                        </button>
                    </div>
                    
                    <div class="border-t pt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Option 2: Paste JSON Data</label>
                        <textarea id="import-json" rows="4" placeholder="Paste Apify dataset JSON here..." 
                                  class="w-full px-4 py-2 border border-slate-200 rounded focus:outline-none focus:border-blue-500 text-sm"></textarea>
                        <button onclick="app.importFromJSON()" class="mt-2 w-full btn btn-secondary">
                            Import JSON
                        </button>
                    </div>
                </div>
                
                <div id="import-status" class="mt-4 hidden">
                    <div class="loading"></div>
                    <span class="ml-2">Importing...</span>
                </div>
                
                <button onclick="app.hideModal('import-modal')" class="mt-4 text-gray-600 hover:text-gray-800">
                    Cancel
                </button>
            </div>
        </div>
    </div>
    
    <script>
        // Wait for Supabase to load, then initialize
        let supabaseClient;
        
        // Application state and methods
        window.app = {
            // State
            currentView: 'dashboard',
            people: [],
            companies: {},
            posts: [],
            filteredPeople: [],
            currentSourceFilter: 'all',
            currentSearchTerm: '',
            
            // Initialize
            async init() {
                console.log('Initializing Signals & Actions...');
                try {
                    await this.loadData();
                    this.updateStats();
                    await this.loadCampaignStats();
                } catch (error) {
                    console.error('Error during initialization:', error);
                    this.showMessage('Failed to load data. Please check console for details.', 'error');
                }
            },
            
            // Load data from Supabase
            async loadData() {
                try {
                    console.log('Loading data from Supabase...');
                    
                    // Try loading from campaign source view first
                    const { data: people, error: peopleError } = await supabaseClient
                        .from('people_with_campaign_source')
                        .select('*')
                        .order('engagement_score', { ascending: false });
                    
                    if (peopleError) {
                        // Fallback to regular persons table if view doesn't exist
                        console.warn('Campaign source view not found, falling back to persons table:', peopleError);
                        const { data: fallbackPeople, error: fallbackError } = await supabaseClient
                            .from('persons')
                            .select('*')
                            .eq('tenant_id', DEFAULT_TENANT_ID)
                            .order('engagement_score', { ascending: false });
                        
                        if (fallbackError) {
                            console.error('Error loading people:', fallbackError);
                            throw fallbackError;
                        }
                        this.people = fallbackPeople || [];
                        console.log(`Loaded ${this.people.length} people from persons table`);
                    } else {
                        this.people = people || [];
                        console.log(`Loaded ${this.people.length} people with campaign source data`);
                    }
                    
                    this.filteredPeople = this.people;
                    if (this.people.length > 0 && this.people[0].hasOwnProperty('is_campaign_sourced')) {
                        this.updateSourceCounts();
                    }
                    
                    // Load posts
                    const { data: posts, error: postsError } = await supabaseClient
                        .from('posts')
                        .select('*')
                        .eq('tenant_id', DEFAULT_TENANT_ID)
                        .order('created_at', { ascending: false });
                    
                    if (postsError) throw postsError;
                    this.posts = posts || [];
                    
                    // Count engagements per post
                    for (const post of this.posts) {
                        const { count } = await supabaseClient
                            .from('engagements')
                            .select('*', { count: 'exact', head: true })
                            .eq('post_id', post.id)
                            .eq('tenant_id', DEFAULT_TENANT_ID);
                        post.engagement_count = count || 0;
                    }
                    
                    // Calculate company aggregations
                    this.companies = {};
                    this.people.forEach(person => {
                        const company = person.current_company || 'Unknown';
                        if (!this.companies[company]) {
                            this.companies[company] = {
                                name: company,
                                people: [],
                                totalEngagements: 0,
                                avgScore: 0
                            };
                        }
                        this.companies[company].people.push(person);
                        this.companies[company].totalEngagements += person.engagement_score || 0;
                    });
                    
                    // Calculate average scores
                    Object.values(this.companies).forEach(company => {
                        company.avgScore = company.people.length > 0 
                            ? Math.round(company.totalEngagements / company.people.length)
                            : 0;
                    });
                    
                    await this.renderCurrentView();
                    console.log('Data loading complete');
                } catch (error) {
                    console.error('Error loading data:', error);
                    this.showMessage('Failed to load data: ' + error.message, 'error');
                }
            },
            
            // Import from Apify
            async importFromApify() {
                const runId = document.getElementById('import-run-id').value.trim();
                const postUrl = document.getElementById('import-post-url').value.trim();
                
                if (!runId) {
                    alert('Please enter a Run ID');
                    return;
                }
                
                document.getElementById('import-status').classList.remove('hidden');
                
                try {
                    // First, get the run details to find the dataset ID
                    const runResponse = await fetch(
                        `https://api.apify.com/v2/actor-runs/${runId}?token=${APIFY_CONFIG.token}`
                    );
                    
                    if (!runResponse.ok) {
                        throw new Error('Failed to fetch run details. Please check the Run ID.');
                    }
                    
                    const runData = await runResponse.json();
                    const datasetId = runData.data.defaultDatasetId;
                    
                    // Now fetch the dataset items
                    const response = await fetch(
                        `https://api.apify.com/v2/datasets/${datasetId}/items?token=${APIFY_CONFIG.token}`
                    );
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch dataset items');
                    }
                    
                    const data = await response.json();
                    await this.processImportData(data, postUrl);
                    
                } catch (error) {
                    console.error('Import error:', error);
                    alert(error.message || 'Failed to import from Apify. Please check the Run ID.');
                } finally {
                    document.getElementById('import-status').classList.add('hidden');
                }
            },
            
            // Import from JSON
            async importFromJSON() {
                const jsonText = document.getElementById('import-json').value.trim();
                if (!jsonText) {
                    alert('Please paste JSON data');
                    return;
                }
                
                try {
                    const data = JSON.parse(jsonText);
                    await this.processImportData(Array.isArray(data) ? data : [data]);
                } catch (error) {
                    console.error('JSON parse error:', error);
                    alert('Invalid JSON format');
                }
            },
            
            // Process import data
            async processImportData(items, postUrl = null) {
                console.log(`Processing ${items.length} items...`);
                
                // Debug: Log first item to see structure
                if (items.length > 0) {
                    console.log('Sample item structure:', items[0]);
                }
                
                // Try to extract post URL from the first item if not provided
                if (!postUrl && items.length > 0 && items[0].postUrl) {
                    postUrl = items[0].postUrl;
                    console.log('Extracted post URL from data:', postUrl);
                }
                
                // Store the post URL if we have it
                let postId = null;
                if (postUrl) {
                    try {
                        // Check if post exists
                        const { data: existingPost } = await supabaseClient
                            .from('posts')
                            .select('id')
                            .eq('linkedin_url', postUrl)
                            .eq('tenant_id', DEFAULT_TENANT_ID)
                            .maybeSingle();
                        
                        if (existingPost) {
                            postId = existingPost.id;
                        } else {
                            // Create the post
                            const { data: newPost, error: postError } = await supabaseClient
                                .from('posts')
                                .insert({
                                    linkedin_url: postUrl,
                                    url: postUrl,
                                    post_title: 'Imported Post',
                                    is_organic: true,
                                    tenant_id: DEFAULT_TENANT_ID
                                })
                                .select('id')
                                .single();
                            
                            if (postError) throw postError;
                            postId = newPost.id;
                        }
                    } catch (error) {
                        console.log('Post creation error (might already exist):', error);
                    }
                }
                
                let successCount = 0;
                
                for (const item of items) {
                    try {
                        let personId = null;
                        
                        // Check if person exists
                        const { data: existingPerson } = await supabaseClient
                            .from('persons')
                            .select('id, engagement_score')
                            .eq('linkedin_url', item.profileUrl)
                            .eq('tenant_id', DEFAULT_TENANT_ID)
                            .maybeSingle();
                        
                        if (existingPerson) {
                            // Update engagement score
                            const newScore = (existingPerson.engagement_score || 0) + 1;
                            await supabaseClient
                                .from('persons')
                                .update({ engagement_score: newScore })
                                .eq('id', existingPerson.id);
                            personId = existingPerson.id;
                        } else {
                            // Insert new person
                            // Debug logging for photo URLs
                            console.log('Import item structure:', item);
                            console.log('Photo URL options:', {
                                profilePicture: item.profilePicture,
                                photoUrl: item.photoUrl,
                                selected: item.profilePicture || item.photoUrl
                            });
                            
                            const { data: newPerson, error: personError } = await supabaseClient
                                .from('persons')
                                .insert({
                                    linkedin_url: item.profileUrl,
                                    name: item.name,
                                    headline: item.headline,
                                    current_company: item.company || this.extractCompanyFromHeadline(item.headline),
                                    profile_picture: item.profilePicture || item.photoUrl,
                                    engagement_score: 1,
                                    tenant_id: DEFAULT_TENANT_ID
                                })
                                .select('id')
                                .single();
                            
                            if (personError) throw personError;
                            personId = newPerson.id;
                        }
                        
                        // Create engagement record if we have both person and post
                        if (personId && postId) {
                            await supabaseClient
                                .from('engagements')
                                .insert({
                                    post_id: postId,
                                    person_id: personId,
                                    engagement_type: 'reaction',
                                    reaction_type: item.reactionType || 'like',
                                    engaged_at: item.timestamp || new Date().toISOString(),
                                    tenant_id: DEFAULT_TENANT_ID
                                });
                        }
                        
                        successCount++;
                    } catch (error) {
                        console.error('Error processing person:', item.name, error);
                    }
                }
                
                console.log(`Successfully imported ${successCount} of ${items.length} items`);
                this.hideImportModal();
                await this.loadData();
                this.showMessage(`Imported ${successCount} engagements!`, 'success');
            },
            
            // Extract company from headline
            extractCompanyFromHeadline(headline) {
                if (!headline) return 'Unknown';
                
                // Common patterns: "Title at Company" or "Title | Company"
                const patterns = [
                    / at ([^|]+)$/i,
                    / @ ([^|]+)$/i,
                    / \| ([^|]+)$/i,
                ];
                
                for (const pattern of patterns) {
                    const match = headline.match(pattern);
                    if (match) return match[1].trim();
                }
                
                return 'Unknown';
            },
            
            // Quick import
            async quickImport() {
                const runId = document.getElementById('quick-run-id').value.trim();
                const postUrl = document.getElementById('quick-post-url').value.trim();
                if (!runId) return;
                
                document.getElementById('import-run-id').value = runId;
                document.getElementById('import-post-url').value = postUrl;
                await this.importFromApify();
                document.getElementById('quick-run-id').value = '';
                document.getElementById('quick-post-url').value = '';
            },
            
            // UI Methods
            showView(viewName) {
                this.currentView = viewName;
                
                // Hide all views
                document.querySelectorAll('.view').forEach(v => v.classList.add('hidden'));
                
                // Show selected view
                document.getElementById(`${viewName}-view`).classList.remove('hidden');
                
                // Render the view content
                this.renderCurrentView();
            },
            
            async renderCurrentView() {
                switch (this.currentView) {
                    case 'dashboard':
                        await this.renderDashboard();
                        break;
                    case 'people':
                        this.renderPeople();
                        break;
                    case 'companies':
                        this.renderCompanies();
                        break;
                    case 'posts':
                        this.renderPosts();
                        break;
                    case 'campaigns':
                        this.renderCampaigns();
                        break;
                }
            },
            
            async renderDashboard() {
                console.log('Rendering dashboard...');
                
                // Load enhanced campaign stats
                await this.loadCampaignStats();
                
                // Hot prospects
                const hotProspects = this.people.filter(p => (p.engagement_score || 0) >= 5);
                const hotList = document.getElementById('hot-prospects-list');
                
                if (!hotList) {
                    console.warn('Hot prospects list element not found');
                    return;
                }
                
                if (hotProspects.length > 0) {
                    hotList.innerHTML = hotProspects.map(person => `
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded hover:bg-gray-100 cursor-pointer" 
                             onclick="app.showPerson(${JSON.stringify(person).replace(/"/g, '&quot;')})">
                            <div>
                                <div class="font-medium">${person.name}</div>
                                <div class="text-sm text-gray-600">${person.current_company || 'Unknown'}</div>
                            </div>
                            <div class="text-right">
                                <div class="engagement-score">${this.renderScore(person.engagement_score)}</div>
                                <div class="text-sm text-gray-600">${person.engagement_score} engagements</div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    hotList.innerHTML = '<p class="text-gray-500">No hot prospects yet. Import data to find engaged users!</p>';
                }
            },
            
            async loadCampaignStats() {
                try {
                    // Check if linkedin_campaigns table exists first
                    const { data: campaigns, error: campaignsError } = await supabaseClient
                        .from('linkedin_campaigns')
                        .select('*')
                        .eq('tenant_id', DEFAULT_TENANT_ID);
                    
                    if (campaignsError) {
                        console.warn('Campaign tables not yet created, skipping campaign stats');
                        return;
                    }
                    
                    // Get enhanced dashboard stats if available
                    const { data: enhancedStats, error: statsError } = await supabaseClient
                        .from('enhanced_dashboard_stats')
                        .select('*')
                        .single();
                    
                    // Calculate campaign metrics
                    const activeCampaigns = campaigns?.filter(c => c.status === 'ACTIVE').length || 0;
                    const totalBudget = campaigns?.reduce((sum, c) => sum + (c.total_budget_amount || 0), 0) || 0;
                    const totalSpend = enhancedStats?.total_campaign_spend || 0;
                    const campaignEngagements = enhancedStats?.campaign_driven_engagements || 0;
                    const avgCostPerEngagement = enhancedStats?.avg_cost_per_engagement || 0;
                    
                    // Update campaign stats in UI
                    if (document.getElementById('stat-campaigns')) {
                        document.getElementById('stat-campaigns').textContent = activeCampaigns;
                    }
                    if (document.getElementById('stat-spend')) {
                        document.getElementById('stat-spend').textContent = totalSpend > 0 ? `$${totalSpend.toFixed(0)}` : '$0';
                    }
                    if (document.getElementById('stat-campaign-engagements')) {
                        document.getElementById('stat-campaign-engagements').textContent = campaignEngagements;
                    }
                    if (document.getElementById('stat-cpe')) {
                        document.getElementById('stat-cpe').textContent = avgCostPerEngagement > 0 ? `$${avgCostPerEngagement.toFixed(2)}` : '$0';
                    }
                    
                    this.campaignStats = {
                        activeCampaigns,
                        totalBudget,
                        totalSpend,
                        campaignEngagements,
                        avgCostPerEngagement
                    };
                    
                } catch (error) {
                    console.error('Error loading campaign stats:', error);
                }
            },
            
            renderPeople() {
                const tbody = document.getElementById('people-list');
                
                if (this.filteredPeople.length > 0) {
                    tbody.innerHTML = this.filteredPeople.map(person => `
                        <tr class="cursor-pointer" onclick="window.location.href='person-detail.html?id=${person.id}'">
                            <td>
                                <div class="flex items-center gap-3">
                                    ${person.profile_picture ? 
                                        `<img src="${person.profile_picture}" 
                                             alt="${person.name}" 
                                             class="profile-photo"
                                             onerror="this.onerror=null; this.parentElement.innerHTML='<div class=\'profile-placeholder\'><svg class=\'icon icon-sm\' viewBox=\'0 0 24 24\'><path d=\'M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\'></path><circle cx=\'12\' cy=\'7\' r=\'4\'></circle></svg></div>'">` :
                                        '<div class="profile-placeholder"><svg class="icon icon-sm" viewBox="0 0 24 24"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg></div>'
                                    }
                                    <div class="min-w-0 flex-1">
                                        <div class="font-medium text-sm text-truncate text-strong">${person.name}</div>
                                        ${person.is_follower ? '<div class="text-xs text-blue-600 mt-1">Follower</div>' : ''}
                                    </div>
                                </div>
                            </td>
                            <td class="text-sm text-truncate">${person.current_company || 'Unknown'}</td>
                            <td class="text-sm text-truncate">${person.headline || 'â€”'}</td>
                            <td>
                                ${person.is_campaign_sourced ? 
                                    `<div class="flex items-center gap-2" title="Campaign: ${person.campaign_name || 'Unknown'}\nAcquisition Cost: $${person.acquisition_cost || 0}">
                                        <span class="text-blue-600">ðŸŽ¯</span>
                                        <span class="text-xs text-truncate text-blue-600">${person.campaign_name ? person.campaign_name.substring(0, 15) + '...' : 'Campaign'}</span>
                                    </div>` :
                                    '<div class="flex items-center gap-2 text-gray-400">
                                        <span>ðŸ“„</span>
                                        <span class="text-xs">Organic</span>
                                    </div>'
                                }
                            </td>
                            <td>
                                ${this.renderEngagementScore(person.engagement_score || 0)}
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-8 text-muted">
                                No people found. Try importing data or adjusting your search.
                            </td>
                        </tr>
                    `;
                }
            },
            
            renderCompanies() {
                const tbody = document.getElementById('companies-list');
                const companiesList = Object.values(this.companies).sort((a, b) => b.avgScore - a.avgScore);
                
                if (companiesList.length > 0) {
                    tbody.innerHTML = companiesList.map(company => `
                        <tr class="cursor-pointer" onclick="window.location.href='company-detail.html?name=${encodeURIComponent(company.name)}'">
                            <td class="text-sm font-medium text-truncate">${company.name}</td>
                            <td class="text-sm text-mono">${company.people.length}</td>
                            <td class="text-sm text-mono">${company.totalEngagements}</td>
                            <td>
                                ${this.renderEngagementScore(company.avgScore)}
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center py-8 text-muted">
                                No companies yet. Import data to get started!
                            </td>
                        </tr>
                    `;
                }
            },
            
            renderScore(score) {
                const stars = Math.min(5, Math.ceil((score || 0) / 2));
                return Array(5).fill(0).map((_, i) => 
                    `<i class="fas fa-star ${i < stars ? 'star' : 'text-gray-300'}"></i>`
                ).join('');
            },
            
            renderEngagementScore(score) {
                if (score >= 10) {
                    return '<span class="data-pill high">High</span>';
                } else if (score >= 5) {
                    return '<span class="data-pill medium">Medium</span>';
                } else if (score > 0) {
                    return '<span class="data-pill low">Low</span>';
                } else {
                    return '<span class="data-pill">New</span>';
                }
            },
            
            renderPosts() {
                const tbody = document.getElementById('posts-list');
                
                if (this.posts.length > 0) {
                    tbody.innerHTML = this.posts.map(post => `
                        <tr class="cursor-pointer" onclick="window.location.href='post-analysis.html?id=${post.id}'">
                            <td>
                                <div class="flex items-center gap-2">
                                    ${post.linkedin_campaign_id ? 
                                        '<span class="text-blue-600" title="Campaign Post">ðŸ’°</span>' : 
                                        '<span class="text-gray-400" title="Organic Post">ðŸ“„</span>'
                                    }
                                    <div class="min-w-0 flex-1">
                                        <div class="text-sm font-medium text-truncate">${post.post_title || post.content_preview || 'Untitled Post'}</div>
                                        <div class="text-xs text-muted mt-1 text-truncate">${post.linkedin_url ? post.linkedin_url.substring(0, 50) + '...' : ''}</div>
                                        ${post.campaign_spend ? 
                                            `<div class="text-xs text-blue-600 mt-1">Spend: $${post.campaign_spend.toFixed(2)}</div>` : 
                                            ''
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="data-pill ${post.linkedin_campaign_id ? 'high' : 'medium'}">
                                    ${post.linkedin_campaign_id ? 'Sponsored' : 'Organic'}
                                </span>
                            </td>
                            <td class="text-sm">
                                ${post.posted_date ? new Date(post.posted_date).toLocaleDateString() : '\u2014'}
                            </td>
                            <td>
                                <div class="text-sm text-mono font-medium">${post.engagement_count || 0}</div>
                                ${post.true_cost_per_engagement ? 
                                    `<div class="text-xs text-blue-600">$${post.true_cost_per_engagement.toFixed(2)}/eng</div>` : 
                                    ''
                                }
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center py-8 text-muted">
                                No posts yet. Import data to get started!
                            </td>
                        </tr>
                    `;
                }
            },
            
            renderCampaigns() {
                const tbody = document.getElementById('campaigns-list');
                
                // For now, create placeholder campaigns data
                // TODO: Load from campaigns table in database
                const campaigns = [
                    { id: 1, name: 'Q1 Brand Awareness', campaign_type: 'organic', status: 'active', post_count: 5, engagement_count: 127 },
                    { id: 2, name: 'Product Launch Campaign', campaign_type: 'sponsored', status: 'active', post_count: 3, engagement_count: 89 },
                    { id: 3, name: 'Thought Leadership', campaign_type: 'organic', status: 'paused', post_count: 8, engagement_count: 203 }
                ];
                
                if (campaigns.length > 0) {
                    tbody.innerHTML = campaigns.map(campaign => `
                        <tr class="cursor-pointer" onclick="window.location.href='campaign-detail.html?id=${campaign.id}'">
                            <td>
                                <div class="text-sm font-medium text-truncate">${campaign.name}</div>
                            </td>
                            <td>
                                <span class="data-pill ${campaign.campaign_type === 'organic' ? 'medium' : 'high'}">
                                    ${campaign.campaign_type === 'organic' ? 'Organic' : 'Sponsored'}
                                </span>
                            </td>
                            <td>
                                <span class="data-pill ${campaign.status === 'active' ? 'low' : 'medium'}">
                                    ${campaign.status}
                                </span>
                            </td>
                            <td class="text-sm text-mono font-medium">${campaign.post_count}</td>
                            <td class="text-sm text-mono font-medium">${campaign.engagement_count}</td>
                        </tr>
                    `).join('');
                } else {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center py-8 text-muted">
                                No campaigns yet. Create your first campaign!
                            </td>
                        </tr>
                    `;
                }
            },
            
            filterPeople(searchTerm) {
                this.currentSearchTerm = searchTerm.toLowerCase();
                this.applyFilters();
            },
            
            filterBySource(source) {
                this.currentSourceFilter = source;
                
                // Update active state on buttons
                document.querySelectorAll('#people-view .filter-tab').forEach(btn => {
                    btn.classList.remove('active');
                });
                document.getElementById(`filter-${source === 'all' ? 'all-sources' : source}`).classList.add('active');
                
                this.applyFilters();
            },
            
            applyFilters() {
                this.filteredPeople = this.people.filter(person => {
                    // Apply search filter
                    const matchesSearch = !this.currentSearchTerm || 
                        person.name.toLowerCase().includes(this.currentSearchTerm) ||
                        (person.current_company || '').toLowerCase().includes(this.currentSearchTerm) ||
                        (person.headline || '').toLowerCase().includes(this.currentSearchTerm);
                    
                    // Apply source filter
                    const matchesSource = this.currentSourceFilter === 'all' ||
                        (this.currentSourceFilter === 'campaign' && person.is_campaign_sourced) ||
                        (this.currentSourceFilter === 'organic' && !person.is_campaign_sourced);
                    
                    return matchesSearch && matchesSource;
                });
                
                this.updateSourceCounts();
                this.renderPeople();
            },
            
            updateSourceCounts() {
                try {
                    const campaignCount = this.people.filter(p => p.is_campaign_sourced).length;
                    const organicCount = this.people.filter(p => !p.is_campaign_sourced).length;
                    
                    const allSourcesEl = document.getElementById('count-all-sources');
                    const campaignEl = document.getElementById('count-campaign');
                    const organicEl = document.getElementById('count-organic');
                    
                    if (allSourcesEl) allSourcesEl.textContent = this.people.length;
                    if (campaignEl) campaignEl.textContent = campaignCount;
                    if (organicEl) organicEl.textContent = organicCount;
                } catch (error) {
                    console.warn('Error updating source counts:', error);
                }
            },
            
            updateStats() {
                document.getElementById('stat-people').textContent = this.people.length;
                document.getElementById('stat-posts').textContent = this.posts.length;
                document.getElementById('stat-companies').textContent = Object.keys(this.companies).length;
                document.getElementById('stat-engagements').textContent = 
                    this.people.reduce((sum, p) => sum + (p.engagement_score || 0), 0);
                const hotProspects = this.people.filter(p => (p.engagement_score || 0) >= 5);
                document.getElementById('stat-hot').textContent = hotProspects.length;
                
                // Update hot prospects list
                this.updateHotProspects(hotProspects);
            },
            
            updateHotProspects(hotProspects) {
                const container = document.getElementById('hot-prospects-list');
                if (!container) {
                    console.warn('Hot prospects container not found');
                    return;
                }
                if (hotProspects.length > 0) {
                    container.innerHTML = hotProspects.slice(0, 5).map(person => `
                        <div class="flex justify-between items-center p-2 bg-gray-50 rounded hover:bg-gray-100 cursor-pointer"
                             onclick="window.location.href='person-detail.html?id=${person.id}'">
                            <div class="flex items-center gap-2">
                                <div>
                                    <div class="font-medium text-sm">${person.name}</div>
                                    <div class="text-xs text-gray-600">${person.current_company || 'Unknown'}</div>
                                </div>
                                ${person.is_campaign_sourced ? 
                                    `<span class="text-blue-600" title="Campaign: ${person.campaign_name || 'Unknown'}">ðŸŽ¯</span>` : 
                                    ''
                                }
                            </div>
                            <div class="text-right">
                                ${this.renderEngagementScore(person.engagement_score)}
                                ${person.is_campaign_sourced && person.acquisition_cost ? 
                                    `<div class="text-xs text-blue-600 mt-1">$${person.acquisition_cost}</div>` : 
                                    ''
                                }
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = '<p class="text-sm text-muted">No hot prospects yet. Import some engagements to get started!</p>';
                }
            },
            
            showPerson(person) {
                const content = document.getElementById('person-detail-content');
                content.innerHTML = `
                    <div class="space-y-4">
                        <div class="flex items-start justify-between">
                            <div>
                                <h3 class="text-xl font-semibold">${person.name}</h3>
                                <p class="text-gray-600">${person.headline || 'No headline'}</p>
                                <p class="text-gray-600">${person.current_company || 'Unknown company'}</p>
                            </div>
                            ${person.profile_picture ? 
                                `<img src="${person.profile_picture}" alt="${person.name}" class="w-16 h-16 rounded-full" onerror="this.onerror=null; this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center" style="display:none;"><i class="fas fa-user text-gray-400"></i></div>` :
                                '<div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center"><i class="fas fa-user text-gray-400"></i></div>'
                            }
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Engagement Score</h4>
                            <div class="flex items-center gap-2">
                                <div class="engagement-score text-2xl">${this.renderScore(person.engagement_score)}</div>
                                <span class="text-gray-600">(${person.engagement_score || 0} engagements)</span>
                            </div>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">LinkedIn Profile</h4>
                            <a href="${person.linkedin_url}" target="_blank" class="text-blue-600 hover:text-blue-800">
                                <i class="fab fa-linkedin mr-2"></i>View on LinkedIn
                            </a>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Actions</h4>
                            <div class="flex gap-2">
                                <button onclick="app.copyPersonDetails(${JSON.stringify(person).replace(/"/g, '&quot;')})" 
                                        class="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200">
                                    <i class="fas fa-copy mr-2"></i>Copy Details
                                </button>
                                <button onclick="app.exportPerson(${JSON.stringify(person).replace(/"/g, '&quot;')})" 
                                        class="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200">
                                    <i class="fas fa-download mr-2"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                document.getElementById('person-modal').classList.remove('hidden');
            },
            
            showCompany(company) {
                const content = document.getElementById('company-detail-content');
                content.innerHTML = `
                    <div class="space-y-4">
                        <div>
                            <h3 class="text-xl font-semibold">${company.name}</h3>
                            <p class="text-gray-600">${company.people.length} people engaged</p>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Engagement Summary</h4>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <div class="text-2xl font-bold">${company.totalEngagements}</div>
                                    <div class="text-sm text-gray-600">Total Engagements</div>
                                </div>
                                <div>
                                    <div class="engagement-score text-2xl">${this.renderScore(company.avgScore)}</div>
                                    <div class="text-sm text-gray-600">Average Score</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Top Engaged People</h4>
                            <div class="space-y-2">
                                ${company.people.slice(0, 5).map(person => `
                                    <div class="flex justify-between items-center p-2 bg-gray-50 rounded hover:bg-gray-100 cursor-pointer" 
                                         onclick="app.showPerson(${JSON.stringify(person).replace(/"/g, '&quot;')})">
                                        <div>
                                            <div class="font-medium">${person.name}</div>
                                            <div class="text-sm text-gray-600">${person.headline || 'No title'}</div>
                                        </div>
                                        <div class="engagement-score">${this.renderScore(person.engagement_score)}</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                `;
                document.getElementById('company-modal').classList.remove('hidden');
            },
            
            async showPost(post) {
                const content = document.getElementById('post-detail-content');
                
                // Show loading state
                content.innerHTML = `
                    <div class="space-y-4">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="text-xl font-semibold">${post.post_title || 'Untitled Post'}</h3>
                                <span class="px-3 py-1 text-sm rounded-full ${post.is_organic ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}">
                                    ${post.is_organic ? 'Organic' : 'Sponsored'}
                                </span>
                            </div>
                            <button onclick="app.expandPost(${post.id})" class="text-blue-600 hover:text-blue-800 text-sm">
                                <i class="fas fa-expand-alt mr-1"></i>Full View
                            </button>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">LinkedIn Post</h4>
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <a href="${post.linkedin_url || post.url}" target="_blank" class="text-blue-600 hover:text-blue-800 break-all">
                                    <i class="fab fa-linkedin mr-2"></i>${post.linkedin_url || post.url || 'No URL'}
                                </a>
                            </div>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Loading Engagements...</h4>
                            <div class="loading"></div>
                        </div>
                    </div>
                `;
                
                document.getElementById('post-modal').classList.remove('hidden');
                
                // Load engagement data
                try {
                    const engagements = await this.loadEngagements(post.id);
                    const signals = this.computeSignals(engagements);
                    
                    // Update content with engagements
                    content.innerHTML = this.renderPostDetail(post, engagements, signals);
                } catch (error) {
                    console.error('Error loading engagements:', error);
                    content.innerHTML += '<div class="text-red-600">Failed to load engagements</div>';
                }
            },
            
            async loadEngagements(postId) {
                const { data: engagements, error } = await supabaseClient
                    .from('engagements')
                    .select(`
                        *,
                        person:persons(
                            id,
                            name,
                            profile_picture,
                            headline,
                            current_title,
                            current_company,
                            linkedin_url,
                            engagement_score,
                            is_follower
                        )
                    `)
                    .eq('post_id', postId)
                    .eq('tenant_id', DEFAULT_TENANT_ID)
                    .order('engaged_at', { ascending: false });
                
                if (error) throw error;
                return engagements || [];
            },
            
            computeSignals(engagements) {
                const companies = {};
                const titles = {};
                const reactionTypes = {};
                
                engagements.forEach(e => {
                    const person = e.person;
                    
                    // Count companies
                    const company = person.current_company || 'Unknown';
                    companies[company] = (companies[company] || 0) + 1;
                    
                    // Count titles
                    const title = person.current_title || person.headline || 'Unknown';
                    titles[title] = (titles[title] || 0) + 1;
                    
                    // Count reaction types
                    const reaction = e.reaction_type || e.engagement_type || 'reaction';
                    reactionTypes[reaction] = (reactionTypes[reaction] || 0) + 1;
                });
                
                return {
                    topCompanies: Object.entries(companies)
                        .sort(([,a], [,b]) => b - a)
                        .slice(0, 5),
                    topTitles: Object.entries(titles)
                        .sort(([,a], [,b]) => b - a)
                        .slice(0, 5),
                    reactionBreakdown: Object.entries(reactionTypes)
                        .sort(([,a], [,b]) => b - a),
                    followerCount: engagements.filter(e => e.person.is_follower).length,
                    totalEngagements: engagements.length
                };
            },
            
            renderPostDetail(post, engagements, signals) {
                return `
                    <div class="space-y-6">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="text-xl font-semibold">${post.post_title || 'Untitled Post'}</h3>
                                <span class="px-3 py-1 text-sm rounded-full ${post.is_organic ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}">
                                    ${post.is_organic ? 'Organic' : 'Sponsored'}
                                </span>
                            </div>
                            <button onclick="app.expandPost(${post.id})" class="text-blue-600 hover:text-blue-800 text-sm">
                                <i class="fas fa-expand-alt mr-1"></i>Full View
                            </button>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-3">ðŸ“Š Top Signals</h4>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <h5 class="text-sm font-medium text-gray-700 mb-2">Top Companies</h5>
                                    <div class="space-y-1">
                                        ${signals.topCompanies.map(([company, count]) => 
                                            `<div class="flex justify-between text-sm">
                                                <span class="text-gray-900">${company}</span>
                                                <span class="text-gray-600">${count}</span>
                                            </div>`
                                        ).join('')}
                                    </div>
                                </div>
                                <div>
                                    <h5 class="text-sm font-medium text-gray-700 mb-2">Top Reactions</h5>
                                    <div class="space-y-1">
                                        ${signals.reactionBreakdown.map(([reaction, count]) => 
                                            `<div class="flex justify-between text-sm">
                                                <span class="text-gray-900 capitalize">${reaction}</span>
                                                <span class="text-gray-600">${count}</span>
                                            </div>`
                                        ).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-3">Engagements (${signals.totalEngagements})</h4>
                            <div class="max-h-96 overflow-y-auto">
                                <table class="w-full engagement-table">
                                    <thead class="bg-gray-50 sticky top-0">
                                        <tr>
                                            <th class="text-left px-2 py-2 text-xs font-medium text-gray-500 uppercase">Photo</th>
                                            <th class="text-left px-2 py-2 text-xs font-medium text-gray-500 uppercase">Name</th>
                                            <th class="text-left px-2 py-2 text-xs font-medium text-gray-500 uppercase">Title</th>
                                            <th class="text-left px-2 py-2 text-xs font-medium text-gray-500 uppercase">Company</th>
                                            <th class="text-left px-2 py-2 text-xs font-medium text-gray-500 uppercase">Link</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${engagements.map(engagement => {
                                            const person = engagement.person;
                                            return `
                                                <tr class="border-b border-gray-200 hover:bg-gray-50 cursor-pointer" 
                                                    onclick="app.showPerson(${JSON.stringify(person).replace(/"/g, '&quot;')})">
                                                    <td class="px-2 py-2">
                                                        ${person.profile_picture ? 
                                                            `<img src="${person.profile_picture}" 
                                                                 alt="${person.name}" 
                                                                 class="profile-photo"
                                                                 onerror="this.onerror=null; this.parentElement.innerHTML='<div class=\\'profile-placeholder\\'><i class=\\'fas fa-user text-gray-600 text-xs\\'></i></div>'">` :
                                                            '<div class="profile-placeholder"><i class="fas fa-user text-gray-600 text-xs"></i></div>'
                                                        }
                                                    </td>
                                                    <td class="px-2 py-2">
                                                        <div class="font-medium text-sm">${person.name}</div>
                                                        ${person.is_follower ? '<div class="text-xs text-blue-600">ðŸ‘¥ Follower</div>' : ''}
                                                    </td>
                                                    <td class="px-2 py-2 text-sm text-gray-600">
                                                        ${person.current_title || person.headline || '-'}
                                                    </td>
                                                    <td class="px-2 py-2 text-sm">
                                                        ${person.current_company || 'Unknown'}
                                                    </td>
                                                    <td class="px-2 py-2">
                                                        <a href="${person.linkedin_url}" target="_blank" 
                                                           onclick="event.stopPropagation()" 
                                                           class="text-blue-600 hover:text-blue-800">
                                                            <i class="fab fa-linkedin"></i>
                                                        </a>
                                                    </td>
                                                </tr>
                                            `;
                                        }).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div class="border-t pt-4">
                            <h4 class="font-semibold mb-2">Actions</h4>
                            <div class="flex gap-2">
                                <button onclick="app.expandPost(${post.id})" 
                                        class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                    <i class="fas fa-expand-alt mr-1"></i>Full Analysis
                                </button>
                                <button onclick="app.uploadCSV(${post.id})" 
                                        class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                                    <i class="fas fa-upload mr-1"></i>Upload CSV Data
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            },
            
            expandPost(postId) {
                window.location.href = `post-analysis.html?id=${postId}`;
            },
            
            viewEngagements(postId) {
                // TODO: Implement view engagements
                alert('View engagements feature coming soon!');
            },
            
            uploadCSV(postId) {
                // TODO: Implement CSV upload
                alert('CSV upload feature coming soon!');
            },
            
            hideModal(modalId) {
                document.getElementById(modalId).classList.add('hidden');
            },
            
            closeModalOnBackdrop(event, modalId) {
                if (event.target === event.currentTarget) {
                    this.hideModal(modalId);
                }
            },
            
            hidePersonModal() {
                document.getElementById('person-modal').classList.add('hidden');
            },
            
            showImportModal() {
                document.getElementById('import-modal').classList.remove('hidden');
            },
            
            hideImportModal() {
                document.getElementById('import-modal').classList.add('hidden');
                document.getElementById('import-run-id').value = '';
                document.getElementById('import-post-url').value = '';
                document.getElementById('import-json').value = '';
            },
            
            copyPersonDetails(person) {
                const details = `${person.name}
${person.headline || 'No headline'}
${person.current_company || 'Unknown company'}
LinkedIn: ${person.linkedin_url}
Engagement Score: ${person.engagement_score || 0}`;
                
                navigator.clipboard.writeText(details);
                this.showMessage('Copied to clipboard!', 'success');
            },
            
            exportPerson(person) {
                const data = [person];
                this.downloadCSV(data, `${person.name.replace(/\s+/g, '_')}_export.csv`);
            },
            
            exportCSV() {
                if (this.people.length === 0) {
                    alert('No data to export');
                    return;
                }
                
                this.downloadCSV(this.people, 'linkedin_engagements_export.csv');
            },
            
            downloadCSV(data, filename) {
                const headers = ['Name', 'Company', 'Title', 'LinkedIn URL', 'Engagement Score'];
                const rows = data.map(person => [
                    person.name,
                    person.current_company || 'Unknown',
                    person.headline || '',
                    person.linkedin_url,
                    person.engagement_score || 0
                ]);
                
                const csv = [headers, ...rows]
                    .map(row => row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(','))
                    .join('\n');
                
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                a.click();
                URL.revokeObjectURL(url);
                
                this.showMessage('Export complete!', 'success');
            },
            
            showMessage(message, type = 'info') {
                const colors = {
                    success: 'bg-green-100 text-green-800',
                    error: 'bg-red-100 text-red-800',
                    info: 'bg-blue-100 text-blue-800'
                };
                
                const div = document.createElement('div');
                div.className = `fixed top-4 right-4 px-6 py-3 rounded-lg ${colors[type]} fade-in`;
                div.textContent = message;
                document.body.appendChild(div);
                
                setTimeout(() => {
                    div.style.opacity = '0';
                    setTimeout(() => div.remove(), 300);
                }, 3000);
            }
        };
        
        // Toggle sidebar for mobile
        window.toggleSidebar = function() {
            const sidebar = document.querySelector('.sidebar-nav');
            if (sidebar) {
                sidebar.classList.toggle('sidebar-open');
            }
        }
        
        // Handle URL fragment navigation
        function handleFragmentNavigation() {
            const hash = window.location.hash.substring(1); // Remove the #
            if (hash && ['dashboard', 'posts', 'people', 'companies', 'campaigns'].includes(hash)) {
                app.showView(hash);
            }
        }
        
        // Load sidebar component
        async function loadSidebar() {
            try {
                console.log('Loading sidebar...');
                const response = await fetch('./components/sidebar.html');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const sidebarHTML = await response.text();
                const container = document.getElementById('sidebar-container');
                if (!container) {
                    console.error('Sidebar container not found!');
                    return;
                }
                container.innerHTML = sidebarHTML;
                console.log('Sidebar loaded successfully');
                
                // Set active nav item for current page
                const currentPath = window.location.pathname.split('/').pop() || 'index.html';
                const currentHash = window.location.hash.substring(1) || 'dashboard';
                document.querySelectorAll('.nav-item').forEach(item => {
                    const href = item.getAttribute('href');
                    if (href && (href.includes(currentPath) || href.includes('#' + currentHash))) {
                        item.classList.add('active');
                    }
                });
            } catch (error) {
                console.error('Failed to load sidebar:', error);
                // Add a basic sidebar as fallback
                const container = document.getElementById('sidebar-container');
                if (container) {
                    container.innerHTML = `
                        <nav class="sidebar-nav">
                            <div class="sidebar-header">
                                <h1 class="sidebar-title">Signals & Actions</h1>
                            </div>
                            <div class="sidebar-content">
                                <div class="nav-section">
                                    <a href="#dashboard" class="nav-item" onclick="app.showView('dashboard')">
                                        <i class="fas fa-chart-line"></i>
                                        <span>Dashboard</span>
                                    </a>
                                    <a href="#posts" class="nav-item" onclick="app.showView('posts')">
                                        <i class="fas fa-file-alt"></i>
                                        <span>Posts</span>
                                    </a>
                                    <a href="#people" class="nav-item" onclick="app.showView('people')">
                                        <i class="fas fa-users"></i>
                                        <span>People</span>
                                    </a>
                                    <a href="#companies" class="nav-item" onclick="app.showView('companies')">
                                        <i class="fas fa-building"></i>
                                        <span>Companies</span>
                                    </a>
                                    <a href="#campaigns" class="nav-item" onclick="app.showView('campaigns')">
                                        <i class="fas fa-bullhorn"></i>
                                        <span>Campaigns</span>
                                    </a>
                                </div>
                            </div>
                            <div class="sidebar-footer">
                                <div class="sidebar-actions">
                                    <button class="sidebar-btn primary" onclick="app.showImportModal()">
                                        <i class="fas fa-download"></i>
                                        <span>Import Data</span>
                                    </button>
                                </div>
                            </div>
                        </nav>
                    `;
                }
            }
        }
        
        // Initialize app when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('DOM loaded, starting initialization...');
            try {
                // Load sidebar first - don't fail if it doesn't load
                try {
                    await loadSidebar();
                } catch (sidebarError) {
                    console.error('Sidebar failed to load, but continuing:', sidebarError);
                }
                
                // Initialize Supabase client
                if (typeof window.supabase === 'undefined') {
                    console.error('Supabase library not loaded');
                    app.showMessage('Failed to load Supabase library. Please check your internet connection.', 'error');
                    return;
                }
                
                // Check if config is loaded
                if (typeof SUPABASE_CONFIG === 'undefined') {
                    console.error('Config not loaded');
                    app.showMessage('Configuration file not loaded. Please check config.js', 'error');
                    return;
                }
                
                supabaseClient = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
                console.log('Supabase client initialized');
                
                // Handle URL fragments for navigation from detail pages
                handleFragmentNavigation();
                
                // Listen for hash changes
                window.addEventListener('hashchange', handleFragmentNavigation);
                
                // Initialize app
                await app.init();
                console.log('App initialization complete');
            } catch (error) {
                console.error('Error during app initialization:', error);
                app.showMessage('Failed to initialize application: ' + error.message, 'error');
            }
        });
    </script>
</body>
</html>